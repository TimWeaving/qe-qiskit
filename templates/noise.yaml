spec:
  templates:
    # Get a qiskit noise model for and IBM device
    - name: get-qiskit-noise-model
      parent: generic-task
      inputs:
        parameters:
          - name: device-name
          - name: hub
            default: "ibm-q"
          - name: group
            default: "open"
          - name: project
            default: "main"
          - name: api-token
            default: "None"
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import save_circuit_connectivity
                from qeqiskit.utils import save_qiskit_noise_model
                from qeqiskit.noise import get_qiskit_noise_model

                noise_model, device_connectivity = get_qiskit_noise_model('{{inputs.parameters.device-name}}',
                    hub='{{inputs.parameters.hub}}', group='{{inputs.parameters.group}}',
                    project='{{inputs.parameters.project}}', api_token='{{inputs.parameters.api-token}}')

                save_qiskit_noise_model(noise_model, "noise_model.json")
                save_circuit_connectivity(device_connectivity, "device_connectivity.json")
      outputs:
        artifacts:
          - name: noise-model
            path: /app/noise_model.json
          - name: device-connectivity
            path: /app/device_connectivity.json

    - name: get-amplitude-damping-noise-model
      parent: generic-task
      inputs:
        parameters:
          - name: T1
          - name: t-step
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from qeqiskit.utils import save_qiskit_noise_model
                from qeqiskit.noise.basic import create_amplitude_damping_noise

                T_1 = {{inputs.parameters.T1}}
                t_step = {{inputs.parameters.t-step}}
                noise_model = create_amplitude_damping_noise(T_1, t_step)
                save_qiskit_noise_model(noise_model, "noise_model.json")
      outputs:
        artifacts:
          - name: noise-model
            path: /app/noise_model.json

    - name: get-phase-damping-noise-model
      parent: generic-task
      inputs:
        parameters:
          - name: T2
          - name: t-step
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from qeqiskit.utils import save_qiskit_noise_model
                from qeqiskit.noise.basic import create_phase_damping_noise

                T_2 = {{inputs.parameters.T2}}
                t_step = {{inputs.parameters.t-step}}
                noise_model = create_phase_damping_noise(T_2, t_step)
                save_qiskit_noise_model(noise_model, "noise_model.json")
      outputs:
        artifacts:
          - name: noise-model
            path: /app/noise_model.json

    - name: get-phase-amplitude-damping-noise-model
      parent: generic-task
      inputs:
        parameters:
          - name: T1
          - name: T2
          - name: t-step
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from qeqiskit.utils import save_qiskit_noise_model
                from qeqiskit.noise.basic import create_phase_and_amplitude_damping_error

                T_1 - {{inputs.parameters.T1}}
                T_2 = {{inputs.parameters.T2}}
                t_step = {{inputs.parameters.t-step}}
                noise_model = create_phase_and_amplitude_damping_error(T_1 T_2, t_step)
                save_qiskit_noise_model(noise_model, "noise_model.json")
      outputs:
        artifacts:
          - name: noise-model
            path: /app/noise_model.json

    - name: get-pta-noise-model
      parent: generic-task
      inputs:
        parameters:
          - name: T1
          - name: T2
          - name: t-step
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from qeqiskit.utils import save_qiskit_noise_model
                from qeqiskit.noise.basic import create_pta_channel

                T_1 - {{inputs.parameters.T1}}
                T_2 = {{inputs.parameters.T2}}
                t_step = {{inputs.parameters.t-step}}
                noise_model = create_pta_channel(T_1 T_2, t_step)
                save_qiskit_noise_model(noise_model, "noise_model.json")
      outputs:
        artifacts:
          - name: noise-model
            path: /app/noise_model.json
