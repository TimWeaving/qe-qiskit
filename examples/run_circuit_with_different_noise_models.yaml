ZapOSApiVersion: v1alpha1
kind: Workflow

resources:
  - name: z-quantum-core
    type: git
    parameters:
      url: "git@github.com:zapatacomputing/z-quantum-core.git"
      branch: "dev"
  - name: qe-openfermion
    type: git
    parameters:
      url: "git@github.com:zapatacomputing/qe-openfermion.git"
      branch: "dev"
  - name: qe-qiskit
    type: git
    parameters:
      url: "git@github.com:zapatacomputing/qe-qiskit.git"
      branch: "dev"

metadata:
  generateName: qiskit-noise-model-test-

spec:
  entrypoint: main

  arguments:
    parameters:
      - s3-bucket: quantum-engine
      - s3-key: examples/qeqiskit/

  templates:
    - name: main
      steps:
        - - name: get-amplitude-damping-noise-model
            template: get-amplitude-damping-noise-model
            arguments:
              parameters:
                - T1: "40e-6"
                - t-step: "50e-9"

        - - name: get-phase-damping-noise-model
            template: get-phase-damping-noise-model
            arguments:
              parameters:
                - T2: "40e-6"
                - t-step: "50e-9"

        - - name: get-phase-amplitude-damping-noise-model
            template: get-phase-amplitude-damping-noise-model
            arguments:
              parameters:
                - T1: "60e-6"
                - T2: "40e-6"
                - t-step: "50e-9"
          # Create a random circuit
          - name: create-random-circuit
            template: create-random-circuit
            arguments:
              parameters:
                - num-qubits: "4"
                - num-gates: "20"
                - seed: "123"
                - resources: [z-quantum-core]
        # Run without noise model
        - - name: run-circuit-and-measure-noiseless
            template: run-circuit-and-measure
            arguments:
              parameters:
                - backend-specs: "{'module_name': 'qeqiskit.simulator', 'function_name': 'QiskitSimulator', 'device_name': 'statevector_simulator'}"
                - resources: [z-quantum-core, qe-openfermion, qe-qiskit]
              artifacts:
                - circuit:
                    from: "{{steps.create-random-circuit.outputs.artifacts.circuit}}"

        - - name: run-circuit-and-measure-with-amplitude-damping-noise
            template: run-circuit-and-measure
            arguments:
              parameters:
                - backend-specs: "{'module_name': 'qeqiskit.simulator', 'function_name': 'QiskitSimulator', 'device_name': 'statevector_simulator'}"
                - resources: [z-quantum-core, qe-openfermion, qe-qiskit]
              artifacts:
                - noise-model:
                    from: "{{steps.get-amplitude-damping-noise-model.outputs.artifacts.noise-model}}"
                - circuit:
                    from: "{{steps.create-random-circuit.outputs.artifacts.circuit}}"

        - - name: run-circuit-and-measure-with-phase-damping-noise
            template: run-circuit-and-measure
            arguments:
              parameters:
                - backend-specs: "{'module_name': 'qeqiskit.simulator', 'function_name': 'QiskitSimulator', 'device_name': 'statevector_simulator'}"
                - resources: [z-quantum-core, qe-openfermion, qe-qiskit]
              artifacts:
                - noise-model:
                    from: "{{steps.get-phase-damping-noise-model.outputs.artifacts.noise-model}}"
                - circuit:
                    from: "{{steps.create-random-circuit.outputs.artifacts.circuit}}"

        - - name: run-circuit-and-measure-with-phase-and-amplitude-damping-noise
            template: run-circuit-and-measure
            arguments:
              parameters:
                - backend-specs: "{'module_name': 'qeqiskit.simulator', 'function_name': 'QiskitSimulator', 'device_name': 'statevector_simulator'}"
                - resources: [z-quantum-core, qe-openfermion, qe-qiskit]
              artifacts:
                - noise-model:
                    from: "{{steps.get-phase-amplitude-damping-noise-model.outputs.artifacts.noise-model}}"
                - circuit:
                    from: "{{steps.create-random-circuit.outputs.artifacts.circuit}}"
